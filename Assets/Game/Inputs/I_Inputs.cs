//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Inputs/I_Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @I_Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @I_Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""I_Inputs"",
    ""maps"": [
        {
            ""name"": ""Inputs"",
            ""id"": ""c09dc92b-bd34-47f6-b6a4-e2e166609357"",
            ""actions"": [
                {
                    ""name"": ""Movement Player1"",
                    ""type"": ""Button"",
                    ""id"": ""3b55042c-88e4-475c-b480-29f6a16bc6e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement Player2"",
                    ""type"": ""Button"",
                    ""id"": ""438918c8-834b-4d65-a318-cb1a4c23ea08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""5a46cdb0-93b3-48ec-9751-bc8dca7c5517"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""183b296f-e07c-4999-aa32-30292a8ac01c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Player1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""61411b41-b0c0-4b86-a209-541bd7b03f76"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Player1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""85bf4105-6864-4788-8b6c-ee37bea84d74"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Player1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7b8b2e24-431f-4429-b576-b3ee55cc988b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""321edcdb-2e6a-49bf-9249-ccb7661c48de"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Player2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fa057f33-0740-4cd7-8f45-6266798f4d19"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Player2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bdbe260b-eb0b-407b-a343-bc7f04e6f30b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Player2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Inputs
        m_Inputs = asset.FindActionMap("Inputs", throwIfNotFound: true);
        m_Inputs_MovementPlayer1 = m_Inputs.FindAction("Movement Player1", throwIfNotFound: true);
        m_Inputs_MovementPlayer2 = m_Inputs.FindAction("Movement Player2", throwIfNotFound: true);
        m_Inputs_Pause = m_Inputs.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Inputs
    private readonly InputActionMap m_Inputs;
    private List<IInputsActions> m_InputsActionsCallbackInterfaces = new List<IInputsActions>();
    private readonly InputAction m_Inputs_MovementPlayer1;
    private readonly InputAction m_Inputs_MovementPlayer2;
    private readonly InputAction m_Inputs_Pause;
    public struct InputsActions
    {
        private @I_Inputs m_Wrapper;
        public InputsActions(@I_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementPlayer1 => m_Wrapper.m_Inputs_MovementPlayer1;
        public InputAction @MovementPlayer2 => m_Wrapper.m_Inputs_MovementPlayer2;
        public InputAction @Pause => m_Wrapper.m_Inputs_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Inputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputsActions set) { return set.Get(); }
        public void AddCallbacks(IInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_InputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputsActionsCallbackInterfaces.Add(instance);
            @MovementPlayer1.started += instance.OnMovementPlayer1;
            @MovementPlayer1.performed += instance.OnMovementPlayer1;
            @MovementPlayer1.canceled += instance.OnMovementPlayer1;
            @MovementPlayer2.started += instance.OnMovementPlayer2;
            @MovementPlayer2.performed += instance.OnMovementPlayer2;
            @MovementPlayer2.canceled += instance.OnMovementPlayer2;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IInputsActions instance)
        {
            @MovementPlayer1.started -= instance.OnMovementPlayer1;
            @MovementPlayer1.performed -= instance.OnMovementPlayer1;
            @MovementPlayer1.canceled -= instance.OnMovementPlayer1;
            @MovementPlayer2.started -= instance.OnMovementPlayer2;
            @MovementPlayer2.performed -= instance.OnMovementPlayer2;
            @MovementPlayer2.canceled -= instance.OnMovementPlayer2;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IInputsActions instance)
        {
            if (m_Wrapper.m_InputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_InputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputsActions @Inputs => new InputsActions(this);
    public interface IInputsActions
    {
        void OnMovementPlayer1(InputAction.CallbackContext context);
        void OnMovementPlayer2(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
